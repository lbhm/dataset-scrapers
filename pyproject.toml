[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dataset-scrapers"
dynamic = ["version"]
description = "Tools and scripts for downloading and enriching dataset profile collections."
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Lennart Behme", email = "lennart.behme@tu-berlin.de" },
    { name = "Emil Badura", email = "badura@tu-berlin.de" },
]
keywords = ["data discovery", "dataset search", "dataset profiles"]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "cchardet>=2.2.0a2",
    "kaggle>=1.7.3b0",
    "matplotlib>=3.10.0",
    "numpy>=2.2.2",
    "openml>=0.15.1",
    "pandas>=2.2.3",
    "requests>=2.32.3",
    "tqdm>=4.67.1",
]

[project.urls]
Repository = "https://github.com/lbhm/dataset-scrapers"

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pre-commit>=4.1.0",
    "types-requests>=2.32.0.20241016",
]

[tool.hatch.version]
path = "dataset_scrapers/__init__.py"

[tool.ruff]
line-length = 99
target-version = "py311"

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "E",     # pycodestyle errors
    # "EM",    # flake8-errmsg
    "F",     # pyflakes
    "FAST",  # FastAPI rules
    "FURB",  # refurb
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "NPY",   # Numpy checks
    "PD",    # pandas-vet
    "PERF",  # perflint
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RUF",   # ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "TC",    # flake8-typing-checking
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
]
ignore = [
    "COM812", # missing-trailing-comma
    "D",      # pydocstyle
    "PLR",    # pylint refactoring
    "PT",     # flake8-pytest-style
    "S101",   # assert
]

[tool.mypy]
ignore_missing_imports = true
plugins = ["numpy.typing.mypy_plugin"]
strict = true
warn_unused_ignores = false
